#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import os
import os.path
import re
import shutil
import subprocess
import time
import yaml

import graph
import util
import worker_settings
import worker_stub
import domset_binary.util.zmq_sock_utils

TEST_DURATION = 5 # duration of a test run in minutes

def main ():
    try:
        os.makedirs ("tmp")
    except OSError:
        pass
    args = process_arguments ()
    with open (args.config, 'r') as fd:
        cfg = yaml.load (fd)
    print ('Configuration file')
    print (cfg)
    lwsg = worker_settings.load_worker_settings (args.workers)
    g = graph.Graph (cfg)

    if args.check_video:
        check_video (cfg)
    elif args.deploy:
        deploy (lwsg, g)
    else:
        main_operations (args, cfg, lwsg)

def check_video (cfg):
    number_frames = cfg ['video']['frames_per_second'] * 10
    process_recording = util.record_video_gstreamer (
        'check-video-cropping.avi',
        number_frames,
        cfg ['video']['frames_per_second'],
        cfg ['video']['crop_left'],
        cfg ['video']['crop_right'],
        cfg ['video']['crop_top'],
        cfg ['video']['crop_bottom'])
    try:
        process_recording.wait ()
    except KeyboardInterrupt:
        print ('Terminate processes')
    print ('Done checking video cropping')

def deploy (lwsg, g):
    worker_settings.deploy_and_run_workers (
        lwsg,
        os.path.join (os.path.dirname (os.path.abspath (__file__)), 'worker.py'),
        [
            os.path.join (os.path.dirname (os.path.dirname (os.path.abspath (__file__))), 'controllers/domset_interspecies.py'),
            domset_binary.util.zmq_sock_utils.__file__
        ],
        g)

def main_operations (args, cfg, lwsg):
    if args.test_run:
        experiment_duration = TEST_DURATION
    else:
        experiment_duration = cfg ['experiment_duration']
    dws = worker_stub.connect_workers (lwsg)
    if args.run_folder is not None:
        check_experiment_folder (args.run_folder)
    experiment_folder = calculate_experiment_folder_for_new_run () if args.run_folder is None else args.run_folder
    ##
    copy_configuration_files (args.config, args.workers, args.ISI_config, args.ISI_path, experiment_folder)
    ##
    print ('\n* ** Deployment step ** *')
    process_deploy = run_command_deploy (args.config, args.workers)
    print ('Sending initialize message to all workers')
    for ws in dws.values ():
        ws.initialize ()
    print ('All the CASU workers are up and running')
    ##
    create_background_video (cfg, experiment_folder)
    ##
    IR_calibration_step (dws)
    ##
    print ('\n* ** DOMSET algorithm and video recording step ** *')
    print ('In experiments with bee fish, this step has to be coordinated with Paris')
    print ('Press ENTER to start DOMSET and start video recording')
    raw_input ('> ')
    process_ISI = run_ISI (args.ISI_config, args.ISI_path, experiment_folder)
    send_start_command_to_workers (dws)
    print ('[I] recording a {} minutes video'.format (experiment_duration))
    number_frames = cfg ['video']['frames_per_second'] * experiment_duration * 60
    process_recording = util.record_video_gstreamer (
        os.path.join (experiment_folder, 'video.avi'),
        number_frames,
        cfg ['video']['frames_per_second'],
        cfg ['video']['crop_left'],
        cfg ['video']['crop_right'],
        cfg ['video']['crop_top'],
        cfg ['video']['crop_bottom'])
    time.sleep (10)
    try:
        process_recording.wait ()
    except KeyboardInterrupt:
        print ('Terminate processes')
    ##
    print ('\n* ** Termination step ** *')
    send_terminate_command_to_workers (dws)
    print ('In the window with dark red background and titled «deploy», press ENTER.')
    if process_ISI is not None:
        print ('In the window with dark green background and title «ISI», press CONTROL-C.')
    process_deploy.wait ()
    if process_ISI is not None:
        process_ISI.wait ()
    ##
    print ('\n* ** Collect data step ** *')
    worker_settings.collect_data_from_workers (lwsg, experiment_folder)

def process_arguments ():
    parser = argparse.ArgumentParser (
        description = 'EvoVibe system - this application evolves vibration patterns generated by CASUs using bees as fitness providers. This program is part of the ASSISI PatVibe Software Suite.',
        argument_default = None
    )
    parser.add_argument (
        '--config',
        default = 'config',
        metavar = 'FILENAME',
        type = str,
        help = 'configuration file to use')
    parser.add_argument (
        '--workers',
        default = 'workers',
        metavar = 'FILENAME',
        type = str,
        help = 'worker settings file to load')
    parser.add_argument (
        '--deploy',
        action = 'store_true',
        help = 'deploy controllers to the beaglebones. Should be only used while debugging')
    parser.add_argument (
        '--check-video',
        action = 'store_true',
        help = 'check video cropping parameters')
    parser.add_argument (
        '--run-folder',
        metavar = 'PATH',
        type = str,
        help = 'folder where data files are stored.  If not provided a non existant folder named run-xxx will be used.'
    )
    parser.add_argument (
        '--test-run',
        action = 'store_true',
        help = 'do a test run with a length of {} minutes'.format (TEST_DURATION)
    )
    parser.add_argument (
        '--ISI-config',
        #required = True,
        type = str,
        metavar = 'FILENAME',
        help = 'Configuration file for ISI'
    )
    parser.add_argument (
        '--ISI-path',
        type = str,
        metavar = 'PATH',
        default = '.',
        help = 'path to ISI files'
    )
    return parser.parse_args ()

def calculate_experiment_folder_for_new_run ():
    """
    Compute the experiment folder for a new experimental run.
    This folder is where all the files generated by an experimental run are stored.
    """
    run_number = 1
    while True:
        result = 'run-%03d' % (run_number)
        if not os.path.exists (result):
            os.makedirs (result)
            return result
        run_number += 1

def check_experiment_folder (folder):
    casu_folders = re.compile ('casu-[0-9][0-9][0-9]')
    for filename in os.listdir (folder):
        if filename == 'ISIlog':
            print ('[W] Files in the ISIlog can be over written!')
        elif casu_folders.match (filename):
            print ('[W] Files in casu log folder {} can be over written!'.format (filename))

def copy_configuration_files (CASU_config, CASU_workers, ISI_config, ISI_path, run_folder):
    cfg_folder = os.path.join (run_folder, "cfgs")
    os.makedirs (cfg_folder)
    files_to_copy = [
        CASU_config,
        CASU_workers,
    ]
    # read ISI configuration file
    if ISI_config is not None:
        ISI_config_filename = os.path.expanduser (os.path.join (ISI_path, ISI_config))
        with open (ISI_config_filename) as _f:
            ISI_cfg = yaml.safe_load (_f)
            setup = ISI_cfg ['problem_setup']
            alloc_file = os.path.join (ISI_path, setup ['allocfile']) # alloc file defines the master casu for each node in DS
            graph_file = os.path.join (ISI_path, setup ['graphfile']) # graph file specifies edges
        files_to_copy.extend ([
            ISI_config_filename,
            alloc_file,
            graph_file,
        ])
    for filename in files_to_copy:
        short_name = os.path.basename (filename)
        print ('[I] copying file {} to {}'.format (short_name, cfg_folder))
        shutil.copy2 (filename, os.path.join (cfg_folder, short_name))

def create_background_video (cfg, run_folder):
    print ('\n* ** Background video step ** *')
    print ('Close the lab door, close the curtains and turn off the lights...')
    raw_input ('and press ENTER to record a background video')
    number_frames = cfg ['video']['frames_per_second'] * 2
    process_recording = util.record_video_gstreamer (
        os.path.join (run_folder, 'background-video.avi'),
        number_frames,
        cfg ['video']['frames_per_second'],
        cfg ['video']['crop_left'],
        cfg ['video']['crop_right'],
        cfg ['video']['crop_top'],
        cfg ['video']['crop_bottom'])
    process_recording.wait ()

def run_command_deploy (config, workers):
    """
    Create a new process that is going to deploy code to the beagle bones.

    :param config:
    :param workers:
    :return:
    """
    command = [
        util.XTERM,
        '-geometry', '80x20+600+0',
        '-bg', 'rgb:5F/1F/0',
        '-title', 'deploy',
        '-e', 'python "%s" --deploy --config %s --workers "%s" ; echo Press ENTER to finish ; read DUMMY' % (__file__, config, workers)
        ]
    pdeploy = subprocess.Popen (command)
    return pdeploy

def run_ISI (config, path, run_folder, debug = False):
    if config is None:
        print ('[I] there is no ISI configuration file, so there will no ISI process')
        return None
    ISI_log_folder = os.path.join (run_folder, 'ISIlog')
    os.makedirs (ISI_log_folder)
    command = [
        util.XTERM,
        '-geometry', '80x20+0+400',
        '-bg', 'rgb:0/0/1F',
        '-title', 'ISI',
        '-e',
        'python /home/assisi/assisi/inter-domset/inter_domset/ISI/ISI.py --pth {} --proj_conf {} --logpath {}'.format (path, config, ISI_log_folder)
    ]
    if debug:
        print ('Full ISI command is:')
        print (' '.join (command))
        print ()
    return subprocess.Popen (command)

def IR_calibration_step (dict_worker_stubs):
    """
    Sends a command to the code running in the beagle bones that starts the DOMSET thread.

    :param dict_worker_stubs:
    """
    print ('\n* ** Infrared calibration step ** *')
    for ws in dict_worker_stubs.values ():
        ws.ir_calibration_send ()
    for ws in dict_worker_stubs.values ():
        ws.ir_calibration_recv ()
    print ('Infrared calibration finished.')
    print ('Go and put the bees.')
    print ('Press ENTER when you are done')
    raw_input ('> ')

def send_start_command_to_workers (dict_worker_stubs):
    """
    Sends a command to the code running in the beagle bones that starts the DOMSET thread.

    :param dict_worker_stubs:
    """
    for ws in dict_worker_stubs.values ():
        ws.start_domset_send ()
    for ws in dict_worker_stubs.values ():
        ws.start_domset_recv ()

def send_terminate_command_to_workers (dict_worker_stubs):
    """
    Sends a command to the processes running in the beagle bones so that they finish the DOMSET thread.

    :param dict_worker_stubs:
    """
    for ws in dict_worker_stubs.values ():
        ws.terminate_session ()

if __name__ == '__main__':
    main ()
