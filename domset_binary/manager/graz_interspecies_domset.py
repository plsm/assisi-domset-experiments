from __future__ import print_function

import argparse
import os.path
import shutil
import subprocess
import yaml

import util

def main ():
    args = process_arguments ()
    run_folder = calculate_experiment_folder_for_new_run ()
    create_background_video (args, run_folder)
    p1 = run_CASU (args.CASU_config, args.CASU_workers, run_folder)
    p2 = run_ISI (args.ISI_config, args.ISI_path, run_folder)
    p1.wait ()
    p2.wait ()
    copy_configuration_files (args.CASU_config, args.CASU_workers, args.ISI_config, args.ISI_path, run_folder)

def calculate_experiment_folder_for_new_run ():
    """
    Compute the experiment folder for a new experimental run.
    This folder is where all the files generated by an experimental run are stored.
    """
    run_number = 1
    while True:
        result = 'run-{:03d}/'.format (run_number)
        if not os.path.isdir (result) and not os.path.exists (result):
            os.makedirs (result)
            return result
        run_number += 1

def create_background_video (args, run_folder):
    print ('Close the lab door, close the curtains and turn off the lights...')
    raw_input ('and press ENTER to record a background video, WITHOUT bees!')
    with open (args.CASU_config, 'r') as fd:
        cfg = yaml.load (fd)
    number_frames = cfg ['video']['frames_per_second'] * 10
    process_recording = util.record_video_gstreamer (
        os.path.join (run_folder, 'background-video.avi'),
        number_frames,
        cfg ['video']['frames_per_second'],
        cfg ['video']['crop_left'],
        cfg ['video']['crop_right'],
        cfg ['video']['crop_top'],
        cfg ['video']['crop_bottom'])
    process_recording.wait ()


def run_CASU (config, workers, run_folder, debug = False):
    command = [
        util.XTERM,
        '-geometry', '80x20+0+0',
        '-bg', 'rgb:0/1F/0',
        '-title', 'CASU manager',
        '-e',
        '''python /home/assisi/assisi/pedro/assisi-domset-experiments/domset_binary/manager/manager.py --config "{}" --workers "{}" --run-folder "{}" ;
         echo Press ENTER to close window ;
         read DUMMY'''.format (config, workers, run_folder)
    ]
    if debug:
        print ('Full CASU command is:')
        print (' '.join (command))
        print ()
    return subprocess.Popen (command)

def run_ISI (config, path, run_folder, debug = False):
    ISI_log_folder = os.path.join (run_folder, 'ISIlog')
    os.makedirs (ISI_log_folder)
    command = [
        util.XTERM,
        '-geometry', '80x20+0+0',
        '-bg', 'rgb:0/0/1F',
        '-title', 'ISI',
        '-e',
        'python /home/assisi/assisi/inter-domset/inter_domset/ISI/ISI.py --pth {} --proj_conf {} --logpath {}'.format (path, config, ISI_log_folder)
    ]
    if debug:
        print ('Full ISI command is:')
        print (' '.join (command))
        print ()
    return subprocess.Popen (command)

def copy_configuration_files (CASU_config, CASU_workers, ISI_config, ISI_path, run_folder):
    cfg_folder = os.path.join (run_folder, "cfgs")
    os.makedirs (cfg_folder)
    # read ISI configuration file
    ISI_config_filename = os.path.expanduser (os.path.join (ISI_path, ISI_config))
    with open (ISI_config_filename) as _f:
        ISI_cfg = yaml.safe_load (_f)
        setup = ISI_cfg ['problem_setup']
        alloc_file = os.path.join (ISI_path, setup ['allocfile']) # alloc file defines the master casu for each node in DS
        graph_file = os.path.join (ISI_path, setup ['graphfile']) # graph file specifies edges
    files_to_copy = [
        CASU_config,
        CASU_workers,
        ISI_config_filename,
        alloc_file,
        graph_file,
    ]
    for filename in files_to_copy:
        short_name = os.path.basename (filename)
        print ('[I] copying file {} to {}'.format (short_name, run_folder))
        shutil.copy2 (filename, os.path.join (run_folder, short_name))

def process_arguments ():
    parser = argparse.ArgumentParser (
        description = 'Run all the Graz side programs of the inter-species DOMSET demonstrator'
    )
    parser.add_argument (
        '--ISI-config',
        required = True,
        type = str,
        metavar = 'FILENAME',
        help = 'Configuration file for ISI'
    )
    parser.add_argument (
        '--ISI-path',
        type = str,
        metavar = 'PATH',
        default = '.',
        help = 'path to ISI files'
    )
    parser.add_argument (
        '--CASU-workers',
        required = True,
        type = str,
        metavar = 'FILENAME',
        help = 'Filename with network addresses of CASUS'
    )
    parser.add_argument (
        '--CASU-config',
        required = True,
        type = str,
        metavar = 'FILENAME',
        help = 'Configuration file for CASUs controllers'
    )
    return parser.parse_args ()

if __name__ == '__main__':
    main ()
